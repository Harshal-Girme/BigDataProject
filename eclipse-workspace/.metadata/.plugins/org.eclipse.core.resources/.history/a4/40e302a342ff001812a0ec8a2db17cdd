package numberOfFlightsPerAirline.top30;

import java.io.IOException;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.TreeMap;

import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class Top30Mapper extends Mapper<Object, Text, NullWritable, Text>{

	private TreeMap<String, Integer> airlineRecordMap = new TreeMap<String, Integer>();

	@Override
	public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
		
		String[] row = value.toString().split(",");
		
		String airlineId = row[0];
		int count = 0;
		if(airlineRecordMap.containsKey(airlineId)) {
			count = airlineRecordMap.get(airlineId) + 1;
		}
		airlineRecordMap.put(airlineId, count);

	}

	@Override
	protected void cleanup(Context context) throws IOException, InterruptedException {
		LinkedHashMap<String, Integer> reverseSortedMap = new LinkedHashMap<>();
        airlineRecordMap.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
                .forEachOrdered(x -> reverseSortedMap.put(x.getKey(), x.getValue()));
        for (Integer t : reverseSortedMap.values()) {
			context.write(NullWritable.get(), t);
		}
        
	}
}

