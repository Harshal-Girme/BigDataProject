package HW5.HW5part6;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.SortedMapWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Driver {
	public static void main(String[] args) throws Exception {

		Path inputPath = new Path(args[0]);
		Path outputDir = new Path(args[1]);

		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf);
		job.setJarByClass(MMedianmapper.class);

		job.setMapperClass(MMedianmapper.class);
		job.setReducerClass(MMedianreducer.class);
		job.setCombinerClass(MCombiner.class);
		job.setNumReduceTasks(2);

		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(SortedMapWritable.class);

		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(MedianStdDevTuple.class);

		FileInputFormat.addInputPath(job, inputPath);
		job.setInputFormatClass(TextInputFormat.class);

		FileOutputFormat.setOutputPath(job, outputDir);
		FileSystem hdfs = FileSystem.get(conf);

		if (hdfs.exists(outputDir)) {
			hdfs.delete(outputDir, true);
		}

		int code = job.waitForCompletion(true) ? 0 : 1;
		System.exit(code);
		
		job.setMapperClass(MovieMapper.class);
                job.setCombinerClass(MovieCombiner.class);
                job.setReducerClass(MovieReducer.class);
		job.setNumReduceTasks(1);

                TextInputFormat.addInputPath(job, inputPath);
		job.setInputFormatClass(TextInputFormat.class);
                
		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(SortedMapWritable.class);

                FileOutputFormat.setOutputPath(job, outputDir);
                //job.setOutputFormatClass(TextOutputFormat.class);
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(MovieWritable.class);

                
                // Delete output if exists
		FileSystem hdfs = FileSystem.get(conf);
		if (hdfs.exists(outputDir)) {
			hdfs.delete(outputDir, true);
		}


		int code = job.waitForCompletion(true) ? 0 : 1;
		System.exit(code);


	}
}